services:
  postgresql_subscription_service:
    image: postgres
    container_name: postgresql_subscription_container
    environment:
      POSTGRES_PASSWORD: my_secret_password
      POSTGRES_DB: grpc_database
      POSTGRES_USER: user_1
      PGPORT: 5433
    ports:
      - "5433:5433"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_1 -d grpc_database"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - grpc_network
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  postgresql_user_service:
    image: postgres:13-alpine
    ports:
      - 5432:5432
    container_name: postgresql_user_container
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test123
      - POSTGRES_DB=user_management
    volumes:
      - postgres_db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U test -d user_management" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - grpc_network

  subscription_server_service:
    build:
      context: ./subscription_service
    container_name: subscription_service_container
    ports:
      - "50052:50052"
    depends_on:
      postgresql_subscription_service:
        condition: service_healthy
    networks:
      - grpc_network

  user_server_service:
    build:
      dockerfile: Dockerfile
      context: user_service
    container_name: user_service_container
    ports:
      - "50051:50051"
    depends_on:
      postgresql_user_service:
        condition: service_healthy
    networks:
      - grpc_network

  fastapi_orchestrator_service:
    container_name: fastapi_orchestrator_container
    build:
      context: orchestrator_monolith
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - grpc_network

  graphql_service:
    build:
      context: graphql
    container_name: graphql_container
    ports:
      - "5001:5001"
    networks:
      - grpc_network


networks:
  grpc_network:
    driver: bridge

volumes:
  postgresql_data:
    name: grpc_volume
  postgres_db:
    name: postgres_db