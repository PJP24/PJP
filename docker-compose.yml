services:
  orchestrator_service:
    build:
      context: ./Orchestrator_monolith
      dockerfile: Docker/Dockerfile.orchestrator
    ports:
      - "5001:5001"
    environment:
      - USER_SERVICE_HOST=user_service:50051
      - SUBSCRIPTION_SERVICE_HOST=subscription_container:50052
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    container_name: orchestrator_container
    networks:
      - grpc_network

  postgresql_service:
    image: postgres
    container_name: postgresql_container
    environment:
      POSTGRES_PASSWORD: my_secret_password
      POSTGRES_DB: grpc_database
      POSTGRES_USER: user_1
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_1 -d grpc_database"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - grpc_network
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  subscription_server_service:
    build:
      context: ./Subscriptions
    image: grpc-server
    container_name: subscription_server_container
    ports:
      - "50052:50052"
    depends_on:
      postgresql_service:
        condition: service_healthy
    restart: always
    networks:
      - grpc_network

  fastapi_service:
    container_name: fastapi_container
    build:
      context: ./Orchestrator_monolith
      dockerfile: Docker/Dockerfile.fastapi
    ports:
      - 8000:8000
    networks:
      - grpc_network


networks:
  grpc_network:
    name: grpc_network

volumes:
  postgresql_data:
    name: grpc_volume
